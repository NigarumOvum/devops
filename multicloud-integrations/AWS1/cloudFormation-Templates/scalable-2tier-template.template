{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template will setup a scalable fault tolerant multi-tier web application from scratch",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an pre-existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "kum-key",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "EnvType": {
      "Description": "Choose the type of Environment",
      "Default": "test",
      "Type": "String",
      "AllowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "ConstraintDescription": "Must choose the type of environment"
    }
  },
  "Mappings": {},
  "Resources": {
    "tmpVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/20",
        "EnableDnsSupport": "True",
        "EnableDnsHostnames": "True",
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-tmpVPC"
          }
        ]
      }
    },
    "tmpVPCIntGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-tmpVPCIntGateway"
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "tmpVPC"
        },
        "InternetGatewayId": {
          "Ref": "tmpVPCIntGateway"
        }
      }
    },
    "azAPrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "tmpVPC"
        },
        "CidrBlock": "10.0.0.0/22",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-azA-Private-Subnet"
          }
        ]
      }
    },
    "azAWebSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "tmpVPC"
        },
        "CidrBlock": "10.0.4.0/23",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-azA-web-Subnet"
          }
        ]
      }
    },
    "azASpareSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "tmpVPC"
        },
        "CidrBlock": "10.0.6.0/23",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-azA-spare-Subnet"
          }
        ]
      }
    },
    "azBPrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "tmpVPC"
        },
        "CidrBlock": "10.0.8.0/22",
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-azB-Private-Subnet"
          }
        ]
      }
    },
    "azBWebSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "tmpVPC"
        },
        "CidrBlock": "10.0.12.0/23",
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-azB-web-Subnet"
          }
        ]
      }
    },
    "azBSpareSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "tmpVPC"
        },
        "CidrBlock": "10.0.14.0/23",
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-azB-spare-Subnet"
          }
        ]
      }
    },
    "myRouteTbl": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "tmpVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-myRouteTbl"
          }
        ]
      }
    },
    "routeForInternet": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "tmpVPCIntGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "myRouteTbl"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "tmpVPCIntGateway"
        }
      }
    },
    "azAwebSubnetRouteTblAssn": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "azAWebSubnet"
        },
        "RouteTableId": {
          "Ref": "myRouteTbl"
        }
      }
    },
    "azBWebSubnetRouteTblAssn": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "azBWebSubnet"
        },
        "RouteTableId": {
          "Ref": "myRouteTbl"
        }
      }
    },
    "LoadBalancerSecGrp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "The Security Group for the Elastic Load Balancers",
        "VpcId": {
          "Ref": "tmpVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-Load-Balancer-Security-Group"
          }
        ]
      }
    },
    "webSecGrp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security Group for Web servers",
        "VpcId": {
          "Ref": "tmpVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-Web-Security-Group"
          }
        ]
      }
    },
    "webSecGrpInBoundRule1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Fn::GetAtt": [
            "webSecGrp",
            "GroupId"
          ]
        }
      }
    },
    "webSecGrpInBoundRule2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Fn::GetAtt": [
            "webSecGrp",
            "GroupId"
          ]
        }
      }
    },
    "webSecGrpInBoundRule3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Fn::GetAtt": [
            "webSecGrp",
            "GroupId"
          ]
        }
      }
    },
    "dbSecGrp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security Group for Database servers",
        "VpcId": {
          "Ref": "tmpVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-DB-Security-Group"
          }
        ]
      }
    },
    "dbSecGrpInBoundRule": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": "3306",
        "ToPort": "3306",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "webSecGrp",
            "GroupId"
          ]
        },
        "GroupId": {
          "Fn::GetAtt": [
            "dbSecGrp",
            "GroupId"
          ]
        }
      }
    },
    "dbSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "The group of subnets where RDS Instance(s) will be hosted",
        "SubnetIds": [
          {
            "Ref": "azAPrivateSubnet"
          },
          {
            "Ref": "azBPrivateSubnet"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-dbSubnetGroup"
          }
        ]
      }
    },
    "dbMySQLCustomParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties": {
        "Description": "Custom Parameters for the MySQL DB Instance",
        "Family": "MySQL5.6",
        "Parameters": {
          "general_log": "ON",
          "time_zone": "Asia/Calcutta",
          "autocommit": 1
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-dbMySQLCustomParameterGroup"
          }
        ]
      }
    },
    "rdsInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBInstanceIdentifier": "rds-mysql-inst01",
        "DBName": "wpdb01",
        "Engine": "MySQL",
        "MasterUsername": "dbuser",
        "MasterUserPassword": "dbuserpass",
        "AllocatedStorage": "5",
        "DBInstanceClass": "db.t2.micro",
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "dbSecGrp",
              "GroupId"
            ]
          }
        ],
        "DBSubnetGroupName": {
          "Ref": "dbSubnetGroup"
        },
        "DBParameterGroupName": {
          "Ref": "dbMySQLCustomParameterGroup"
        },
        "BackupRetentionPeriod": "3",
        "Port": "3306",
        "MultiAZ": "False",
        "AutoMinorVersionUpgrade": "False",
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-rds-MySQL-Db"
          },
          {
            "Key": "Role",
            "Value": "Primary"
          }
        ]
      },
      "DependsOn": [
        "dbMySQLCustomParameterGroup",
        "dbSubnetGroup",
        "dbSecGrp"
      ],
      "DeletionPolicy": "Delete"
    },
    "webLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "azAWebSubnet"
          },
          {
            "Ref": "azBWebSubnet"
          }
        ],
        "LoadBalancerName": "kum-webLoadBalancer",
        "Listeners": [
          {
            "InstancePort": "80",
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": {
            "Fn::Join": [
              "",
              [
                "HTTP:",
                "80",
                "/"
              ]
            ]
          },
          "Timeout": "5",
          "UnhealthyThreshold": "5"
        },
        "SecurityGroups": [
          {
            "Ref": "webSecGrp"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "kum-webLoadBalancer"
          }
        ],
        "Scheme": "internet-facing"
      },
      "DependsOn": "tmpVPCIntGateway"
    },
    "webServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment": "Webserver running Wordpress Application",
        "AWS::CloudFormation::Init": {
		  "configSets" : {
            "wp_install_configure" : [ "install_wordpress" ]
          },
          "install_wordpress": {
            "packages": {
              "yum": {
                "httpd": [],
                "php": [],
                "php-mysql": [],
                "mysql": []
              }
            },
            "sources": {
              "/var/www/html": "https://wordpress.org/latest.tar.gz"
            },
            "files": {
              "/var/www/html/info.php": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "<?php \n",
					  "phpinfo(); \n",
                      "?> \n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "apache",
                "group": "apache"
              },
              "/tmp/quickConfig": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -ex \n",
                      "groupadd www \n",
                      "chown -R root:www /var/www \n",
                      "chmod 2775 /var/www \n",
                      "find /var/www -type d -exec chmod 2775 {} + \n",
                      "find /var/www -type f -exec chmod 0664 {} + \n",
                      "# Configure SELinux to allow make network connection to database \n",
                      "# setsebool -P httpd_can_network_connect=1 \n",
                      "# setsebool httpd_can_network_connect_db on \n"
                    ]
                  ]
                },
                "mode": "000744",
                "owner": "apache",
                "group": "apache"
              }
            },
            "commands": {
              "01_config": {
                "command": "/tmp/quickConfig",
                "cwd": "/var/www"
              }
            },
            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "EbsOptimized": false,
        "ImageId": "ami-6869aa05",
        "InstanceType": "t2.micro",
        "SecurityGroups": [
          {
            "Ref": "webSecGrp"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "AssociatePublicIpAddress": "true",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex \n",
				"# Install the AWS CloudFormation helper scripts and then run the cfn-init helper script  \n",
				"yum update -y aws-cfn-bootstrap \n",
                "/opt/aws/bin/cfn-init -v --configsets wp_install_configure --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource webServerLaunchConfig --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource AutoScalingGroup --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LoadBalancerNames": [
          {
            "Ref": "webLoadBalancer"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "webServerLaunchConfig"
        },
        "MinSize": "1",
        "MaxSize": "2",
        "DesiredCapacity": "2",
        "VPCZoneIdentifier": [
          {
            "Ref": "azAWebSubnet"
          },
          {
            "Ref": "azBWebSubnet"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "DependsOn": "tmpVPCIntGateway"
    }
  },
  "Outputs": {
    "URL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "webLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      },
      "Description": "Newly created application URL"
    },
    "RDSDatabaseEndpoint": {
      "Description": "RDS DB Endpoint Details",
      "Value": {
        "Fn::GetAtt": [
          "rdsInstance",
          "Endpoint.Address"
        ]
      }
    }
  }
}